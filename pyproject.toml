[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "music-analyzer-pro"
version = "1.0.0"
description = "Modern music application with professional audio analysis and AI enrichment"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Music App Development Team"},
]
keywords = ["music", "audio", "analysis", "pyqt6", "hamms", "mixedinkey"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
]

dependencies = [
    "PyQt6>=6.5.0",
    "PyQt6-Qt6>=6.5.0",
    "PyQt6-sip>=13.5.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "mutagen>=1.46.0",
    "Pillow>=10.0.0",
    "pyqtgraph>=0.13.0",
    "PyYAML>=6.0",
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.2.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.2.0",
    "pytest-mock>=3.10.0",
]

build = [
    "pyinstaller>=6.0.0",
    "pillow>=10.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/music-analyzer-pro"
Documentation = "https://github.com/yourusername/music-analyzer-pro/wiki"
Repository = "https://github.com/yourusername/music-analyzer-pro.git"
"Bug Tracker" = "https://github.com/yourusername/music-analyzer-pro/issues"

[project.scripts]
music-analyzer = "src.music_player:main"
music-analyzer-cli = "src.app:main"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
src = ["**/*.yaml", "**/*.yml", "**/*.json", "**/*.md"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
  | packaging
)/
'''

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # bandit
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "S603",  # subprocess without shell equals true
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S603"]
"scripts/*" = ["S603"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "packaging/",
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]