name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Build with PyInstaller (macOS/Linux)
      if: runner.os != 'Windows'
      run: |
        cd packaging
        pyinstaller --clean -y MusicAnalyzerPro.spec
        cd ..
    
    - name: Build with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        cd packaging
        pyinstaller --clean -y MusicAnalyzerPro_win.spec
        cd ..
    
    - name: Post-build processing
      run: |
        python packaging/scripts/post_build.py --os ${{ runner.os }} --version ${{ steps.get_version.outputs.VERSION }}
      continue-on-error: true
    
    - name: Package artifacts (macOS)
      if: runner.os == 'macOS'
      run: |
        cd packaging/dist
        zip -r ../../MusicAnalyzerPro-${{ steps.get_version.outputs.VERSION }}-macOS.zip MusicAnalyzerPro.app
        cd ../..
        echo "ARTIFACT_PATH=MusicAnalyzerPro-${{ steps.get_version.outputs.VERSION }}-macOS.zip" >> $GITHUB_ENV
    
    - name: Package artifacts (Linux)
      if: runner.os == 'Linux'
      run: |
        cd packaging/dist
        tar czf ../../MusicAnalyzerPro-${{ steps.get_version.outputs.VERSION }}-linux.tar.gz MusicAnalyzerPro/
        cd ../..
        echo "ARTIFACT_PATH=MusicAnalyzerPro-${{ steps.get_version.outputs.VERSION }}-linux.tar.gz" >> $GITHUB_ENV
    
    - name: Package artifacts (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        cd packaging/dist
        7z a -tzip ../../MusicAnalyzerPro-${{ steps.get_version.outputs.VERSION }}-windows.zip MusicAnalyzerPro.exe
        cd ../..
        echo "ARTIFACT_PATH=MusicAnalyzerPro-${{ steps.get_version.outputs.VERSION }}-windows.zip" >> $GITHUB_ENV
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MusicAnalyzerPro-${{ runner.os }}-${{ steps.get_version.outputs.VERSION }}
        path: ${{ env.ARTIFACT_PATH }}
        retention-days: 30
    
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.ARTIFACT_PATH }}
        draft: true
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}